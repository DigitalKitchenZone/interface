/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.24.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
export declare type Addr = string;
export declare type Uint128 = string;
export declare type Duration = {
    height: number;
} | {
    time: number;
};
export declare type VotingStrategy = {
    single_choice: {
        quorum: PercentageThreshold;
        [k: string]: unknown;
    };
};
export declare type PercentageThreshold = {
    majority: {
        [k: string]: unknown;
    };
} | {
    percent: Decimal;
};
export declare type Decimal = string;
export interface ConfigResponse {
    allow_revoting: boolean;
    close_proposal_on_execution_failure: boolean;
    dao: Addr;
    deposit_info?: CheckedDepositInfo | null;
    max_voting_period: Duration;
    min_voting_period?: Duration | null;
    only_members_execute: boolean;
    voting_strategy: VotingStrategy;
    [k: string]: unknown;
}
export interface CheckedDepositInfo {
    deposit: Uint128;
    refund_failed_proposals: boolean;
    token: Addr;
    [k: string]: unknown;
}
export declare type ExecuteMsg = {
    propose: {
        choices: MultipleChoiceOptions;
        description: string;
        title: string;
        [k: string]: unknown;
    };
} | {
    vote: {
        proposal_id: number;
        vote: MultipleChoiceVote;
        [k: string]: unknown;
    };
} | {
    execute: {
        proposal_id: number;
        [k: string]: unknown;
    };
} | {
    close: {
        proposal_id: number;
        [k: string]: unknown;
    };
} | {
    update_config: {
        allow_revoting: boolean;
        close_proposal_on_execution_failure: boolean;
        dao: string;
        deposit_info?: DepositInfo | null;
        max_voting_period: Duration;
        min_voting_period?: Duration | null;
        only_members_execute: boolean;
        voting_strategy: VotingStrategy;
        [k: string]: unknown;
    };
} | {
    add_proposal_hook: {
        address: string;
        [k: string]: unknown;
    };
} | {
    remove_proposal_hook: {
        address: string;
        [k: string]: unknown;
    };
} | {
    add_vote_hook: {
        address: string;
        [k: string]: unknown;
    };
} | {
    remove_vote_hook: {
        address: string;
        [k: string]: unknown;
    };
};
export declare type CosmosMsgForEmpty = {
    bank: BankMsg;
} | {
    custom: Empty;
} | {
    staking: StakingMsg;
} | {
    distribution: DistributionMsg;
} | {
    stargate: {
        type_url: string;
        value: Binary;
        [k: string]: unknown;
    };
} | {
    ibc: IbcMsg;
} | {
    wasm: WasmMsg;
} | {
    gov: GovMsg;
};
export declare type BankMsg = {
    send: {
        amount: Coin[];
        to_address: string;
        [k: string]: unknown;
    };
} | {
    burn: {
        amount: Coin[];
        [k: string]: unknown;
    };
};
export declare type StakingMsg = {
    delegate: {
        amount: Coin;
        validator: string;
        [k: string]: unknown;
    };
} | {
    undelegate: {
        amount: Coin;
        validator: string;
        [k: string]: unknown;
    };
} | {
    redelegate: {
        amount: Coin;
        dst_validator: string;
        src_validator: string;
        [k: string]: unknown;
    };
};
export declare type DistributionMsg = {
    set_withdraw_address: {
        address: string;
        [k: string]: unknown;
    };
} | {
    withdraw_delegator_reward: {
        validator: string;
        [k: string]: unknown;
    };
};
export declare type Binary = string;
export declare type IbcMsg = {
    transfer: {
        amount: Coin;
        channel_id: string;
        timeout: IbcTimeout;
        to_address: string;
        [k: string]: unknown;
    };
} | {
    send_packet: {
        channel_id: string;
        data: Binary;
        timeout: IbcTimeout;
        [k: string]: unknown;
    };
} | {
    close_channel: {
        channel_id: string;
        [k: string]: unknown;
    };
};
export declare type Timestamp = Uint64;
export declare type Uint64 = string;
export declare type WasmMsg = {
    execute: {
        contract_addr: string;
        funds: Coin[];
        msg: Binary;
        [k: string]: unknown;
    };
} | {
    instantiate: {
        admin?: string | null;
        code_id: number;
        funds: Coin[];
        label: string;
        msg: Binary;
        [k: string]: unknown;
    };
} | {
    migrate: {
        contract_addr: string;
        msg: Binary;
        new_code_id: number;
        [k: string]: unknown;
    };
} | {
    update_admin: {
        admin: string;
        contract_addr: string;
        [k: string]: unknown;
    };
} | {
    clear_admin: {
        contract_addr: string;
        [k: string]: unknown;
    };
};
export declare type GovMsg = {
    vote: {
        proposal_id: number;
        vote: VoteOption;
        [k: string]: unknown;
    };
};
export declare type VoteOption = "yes" | "no" | "abstain" | "no_with_veto";
export declare type DepositToken = {
    token: {
        address: string;
        [k: string]: unknown;
    };
} | {
    voting_module_token: {
        [k: string]: unknown;
    };
};
export interface MultipleChoiceOptions {
    options: MultipleChoiceOption[];
    [k: string]: unknown;
}
export interface MultipleChoiceOption {
    description: string;
    msgs?: CosmosMsgForEmpty[] | null;
    [k: string]: unknown;
}
export interface Coin {
    amount: Uint128;
    denom: string;
    [k: string]: unknown;
}
export interface Empty {
    [k: string]: unknown;
}
export interface IbcTimeout {
    block?: IbcTimeoutBlock | null;
    timestamp?: Timestamp | null;
    [k: string]: unknown;
}
export interface IbcTimeoutBlock {
    height: number;
    revision: number;
    [k: string]: unknown;
}
export interface MultipleChoiceVote {
    option_id: number;
    [k: string]: unknown;
}
export interface DepositInfo {
    deposit: Uint128;
    refund_failed_proposals: boolean;
    token: DepositToken;
    [k: string]: unknown;
}
export interface GetVoteResponse {
    vote?: VoteInfo | null;
    [k: string]: unknown;
}
export interface VoteInfo {
    power: Uint128;
    vote: MultipleChoiceVote;
    voter: Addr;
    [k: string]: unknown;
}
export declare type GovernanceModulesResponse = Addr[];
export interface InfoResponse {
    info: ContractVersion;
    [k: string]: unknown;
}
export interface ContractVersion {
    contract: string;
    version: string;
    [k: string]: unknown;
}
export interface InstantiateMsg {
    allow_revoting: boolean;
    close_proposal_on_execution_failure: boolean;
    deposit_info?: DepositInfo | null;
    max_voting_period: Duration;
    min_voting_period?: Duration | null;
    only_members_execute: boolean;
    voting_strategy: VotingStrategy;
    [k: string]: unknown;
}
export declare type MultipleChoiceOptionType = "None" | "Standard";
export declare type Expiration = {
    at_height: number;
} | {
    at_time: Timestamp;
} | {
    never: {
        [k: string]: unknown;
    };
};
export declare type Status = "open" | "rejected" | "passed" | "executed" | "closed" | "execution_failed";
export interface ListProposalsResponse {
    proposals: ProposalResponse[];
    [k: string]: unknown;
}
export interface ProposalResponse {
    id: number;
    proposal: MultipleChoiceProposal;
    [k: string]: unknown;
}
export interface MultipleChoiceProposal {
    allow_revoting: boolean;
    choices: CheckedMultipleChoiceOption[];
    created: Timestamp;
    deposit_info?: CheckedDepositInfo | null;
    description: string;
    expiration: Expiration;
    last_updated: Timestamp;
    min_voting_period?: Expiration | null;
    proposer: Addr;
    start_height: number;
    status: Status;
    title: string;
    total_power: Uint128;
    votes: MultipleChoiceVotes;
    voting_strategy: VotingStrategy;
    [k: string]: unknown;
}
export interface CheckedMultipleChoiceOption {
    description: string;
    index: number;
    msgs?: CosmosMsgForEmpty[] | null;
    option_type: MultipleChoiceOptionType;
    vote_count: Uint128;
    [k: string]: unknown;
}
export interface MultipleChoiceVotes {
    vote_weights: Uint128[];
    [k: string]: unknown;
}
export interface ListVotesResponse {
    votes: VoteInfo[];
    [k: string]: unknown;
}
export interface MigrateMsg {
    [k: string]: unknown;
}
export declare type ProposalCountResponse = number;
export interface ProposalHooksResponse {
    hooks: string[];
    [k: string]: unknown;
}
export declare type QueryMsg = {
    config: {
        [k: string]: unknown;
    };
} | {
    proposal: {
        proposal_id: number;
        [k: string]: unknown;
    };
} | {
    list_proposals: {
        limit?: number | null;
        start_after?: number | null;
        [k: string]: unknown;
    };
} | {
    reverse_proposals: {
        limit?: number | null;
        start_before?: number | null;
        [k: string]: unknown;
    };
} | {
    proposal_count: {
        [k: string]: unknown;
    };
} | {
    get_vote: {
        proposal_id: number;
        voter: string;
        [k: string]: unknown;
    };
} | {
    list_votes: {
        limit?: number | null;
        proposal_id: number;
        start_after?: string | null;
        [k: string]: unknown;
    };
} | {
    proposal_hooks: {
        [k: string]: unknown;
    };
} | {
    vote_hooks: {
        [k: string]: unknown;
    };
} | {
    info: {
        [k: string]: unknown;
    };
};
export interface ReverseProposalsResponse {
    proposals: ProposalResponse[];
    [k: string]: unknown;
}
export interface VoteHooksResponse {
    hooks: string[];
    [k: string]: unknown;
}
export interface VoteResponse {
    vote?: VoteInfo | null;
    [k: string]: unknown;
}
export declare type CWProposalMultipleExecuteMsg = ExecuteMsg;
