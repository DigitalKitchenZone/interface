/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.24.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { AddressOfResponse, AdminAddressResponse, AllNftInfoResponse, OwnerOfResponse, Metadata, AllTokensResponse, Uint128, ContractInfoResponse, SurchargeInfo, ListUserInfoResponse, NftInfoResponse, NumTokensResponse, PrimaryAliasResponse, TokensResponse } from "./Profiles.types";
export interface ProfilesReadOnlyInterface {
    contractAddress: string;
    primaryAlias: ({ address }: {
        address: string;
    }) => Promise<PrimaryAliasResponse>;
    ownerOf: ({ includeExpired, tokenId }: {
        includeExpired?: boolean;
        tokenId: string;
    }) => Promise<OwnerOfResponse>;
    addressOf: ({ tokenId }: {
        tokenId: string;
    }) => Promise<AddressOfResponse>;
    numTokens: () => Promise<NumTokensResponse>;
    contractInfo: () => Promise<ContractInfoResponse>;
    nftInfo: ({ tokenId }: {
        tokenId: string;
    }) => Promise<NftInfoResponse>;
    allNftInfo: ({ includeExpired, tokenId }: {
        includeExpired?: boolean;
        tokenId: string;
    }) => Promise<AllNftInfoResponse>;
    tokens: ({ limit, owner, startAfter }: {
        limit?: number;
        owner: string;
        startAfter?: string;
    }) => Promise<TokensResponse>;
    allTokens: ({ limit, startAfter }: {
        limit?: number;
        startAfter?: string;
    }) => Promise<AllTokensResponse>;
    adminAddress: () => Promise<AdminAddressResponse>;
    listUserInfo: ({ aliases }: {
        aliases: string[];
    }) => Promise<ListUserInfoResponse>;
}
export declare class ProfilesQueryClient implements ProfilesReadOnlyInterface {
    client: CosmWasmClient;
    contractAddress: string;
    constructor(client: CosmWasmClient, contractAddress: string);
    primaryAlias: ({ address }: {
        address: string;
    }) => Promise<PrimaryAliasResponse>;
    ownerOf: ({ includeExpired, tokenId }: {
        includeExpired?: boolean;
        tokenId: string;
    }) => Promise<OwnerOfResponse>;
    addressOf: ({ tokenId }: {
        tokenId: string;
    }) => Promise<AddressOfResponse>;
    numTokens: () => Promise<NumTokensResponse>;
    contractInfo: () => Promise<ContractInfoResponse>;
    nftInfo: ({ tokenId }: {
        tokenId: string;
    }) => Promise<NftInfoResponse>;
    allNftInfo: ({ includeExpired, tokenId }: {
        includeExpired?: boolean;
        tokenId: string;
    }) => Promise<AllNftInfoResponse>;
    tokens: ({ limit, owner, startAfter }: {
        limit?: number;
        owner: string;
        startAfter?: string;
    }) => Promise<TokensResponse>;
    allTokens: ({ limit, startAfter }: {
        limit?: number;
        startAfter?: string;
    }) => Promise<AllTokensResponse>;
    adminAddress: () => Promise<AdminAddressResponse>;
    listUserInfo: ({ aliases }: {
        aliases: string[];
    }) => Promise<ListUserInfoResponse>;
}
export interface ProfilesInterface extends ProfilesReadOnlyInterface {
    contractAddress: string;
    sender: string;
    updateMintingFees: ({ baseMintFee, burnPercentage, shortNameSurcharge, tokenCap }: {
        baseMintFee?: Uint128;
        burnPercentage?: number;
        shortNameSurcharge?: SurchargeInfo;
        tokenCap?: number;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    updateUsernameLengthCap: ({ newLength }: {
        newLength: number;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    updateMetadata: ({ metadata, tokenId }: {
        metadata: Metadata;
        tokenId: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    burn: ({ tokenId }: {
        tokenId: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    setAdminAddress: ({ adminAddress }: {
        adminAddress: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    mint: ({ extension, owner, tokenId, tokenUri }: {
        extension: Metadata;
        owner: string;
        tokenId: string;
        tokenUri?: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
export declare class ProfilesClient extends ProfilesQueryClient implements ProfilesInterface {
    client: SigningCosmWasmClient;
    sender: string;
    contractAddress: string;
    constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string);
    updateMintingFees: ({ baseMintFee, burnPercentage, shortNameSurcharge, tokenCap }: {
        baseMintFee?: Uint128;
        burnPercentage?: number;
        shortNameSurcharge?: SurchargeInfo;
        tokenCap?: number;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    updateUsernameLengthCap: ({ newLength }: {
        newLength: number;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    updateMetadata: ({ metadata, tokenId }: {
        metadata: Metadata;
        tokenId: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    burn: ({ tokenId }: {
        tokenId: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    setAdminAddress: ({ adminAddress }: {
        adminAddress: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    mint: ({ extension, owner, tokenId, tokenUri }: {
        extension: Metadata;
        owner: string;
        tokenId: string;
        tokenUri?: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
