/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.24.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import { ActiveProposalModulesResponse, AdminNominationResponse, AdminResponse, ConfigResponse, Uint128, Cw20BalancesResponse, Cw20TokenListResponse, Cw721TokenListResponse, DaoURIResponse, PauseInfoResponse, DumpStateResponse, Config, CosmosMsgForEmpty, Binary, Duration, Coin, ModuleInstantiateInfo, SubDao, GetItemResponse, InfoResponse, ListItemsResponse, ListSubDaosResponse, ProposalModulesResponse, TotalPowerAtHeightResponse, VotingModuleResponse, VotingPowerAtHeightResponse } from "./CWCore.types";
export interface CWCoreReadOnlyInterface {
    contractAddress: string;
    admin: () => Promise<AdminResponse>;
    adminNomination: () => Promise<AdminNominationResponse>;
    config: () => Promise<ConfigResponse>;
    cw20Balances: ({ limit, startAfter }: {
        limit?: number;
        startAfter?: string;
    }) => Promise<Cw20BalancesResponse>;
    cw20TokenList: ({ limit, startAfter }: {
        limit?: number;
        startAfter?: string;
    }) => Promise<Cw20TokenListResponse>;
    cw721TokenList: ({ limit, startAfter }: {
        limit?: number;
        startAfter?: string;
    }) => Promise<Cw721TokenListResponse>;
    dumpState: () => Promise<DumpStateResponse>;
    getItem: ({ key }: {
        key: string;
    }) => Promise<GetItemResponse>;
    listItems: ({ limit, startAfter }: {
        limit?: number;
        startAfter?: string;
    }) => Promise<ListItemsResponse>;
    proposalModules: ({ limit, startAfter }: {
        limit?: number;
        startAfter?: string;
    }) => Promise<ProposalModulesResponse>;
    activeProposalModules: ({ limit, startAfter }: {
        limit?: number;
        startAfter?: string;
    }) => Promise<ActiveProposalModulesResponse>;
    pauseInfo: () => Promise<PauseInfoResponse>;
    votingModule: () => Promise<VotingModuleResponse>;
    listSubDaos: ({ limit, startAfter }: {
        limit?: number;
        startAfter?: string;
    }) => Promise<ListSubDaosResponse>;
    daoURI: () => Promise<DaoURIResponse>;
    votingPowerAtHeight: ({ address, height }: {
        address: string;
        height?: number;
    }) => Promise<VotingPowerAtHeightResponse>;
    totalPowerAtHeight: ({ height }: {
        height?: number;
    }) => Promise<TotalPowerAtHeightResponse>;
    info: () => Promise<InfoResponse>;
}
export declare class CWCoreQueryClient implements CWCoreReadOnlyInterface {
    client: CosmWasmClient;
    contractAddress: string;
    constructor(client: CosmWasmClient, contractAddress: string);
    admin: () => Promise<AdminResponse>;
    adminNomination: () => Promise<AdminNominationResponse>;
    config: () => Promise<ConfigResponse>;
    cw20Balances: ({ limit, startAfter }: {
        limit?: number;
        startAfter?: string;
    }) => Promise<Cw20BalancesResponse>;
    cw20TokenList: ({ limit, startAfter }: {
        limit?: number;
        startAfter?: string;
    }) => Promise<Cw20TokenListResponse>;
    cw721TokenList: ({ limit, startAfter }: {
        limit?: number;
        startAfter?: string;
    }) => Promise<Cw721TokenListResponse>;
    dumpState: () => Promise<DumpStateResponse>;
    getItem: ({ key }: {
        key: string;
    }) => Promise<GetItemResponse>;
    listItems: ({ limit, startAfter }: {
        limit?: number;
        startAfter?: string;
    }) => Promise<ListItemsResponse>;
    proposalModules: ({ limit, startAfter }: {
        limit?: number;
        startAfter?: string;
    }) => Promise<ProposalModulesResponse>;
    activeProposalModules: ({ limit, startAfter }: {
        limit?: number;
        startAfter?: string;
    }) => Promise<ActiveProposalModulesResponse>;
    pauseInfo: () => Promise<PauseInfoResponse>;
    votingModule: () => Promise<VotingModuleResponse>;
    listSubDaos: ({ limit, startAfter }: {
        limit?: number;
        startAfter?: string;
    }) => Promise<ListSubDaosResponse>;
    daoURI: () => Promise<DaoURIResponse>;
    votingPowerAtHeight: ({ address, height }: {
        address: string;
        height?: number;
    }) => Promise<VotingPowerAtHeightResponse>;
    totalPowerAtHeight: ({ height }: {
        height?: number;
    }) => Promise<TotalPowerAtHeightResponse>;
    info: () => Promise<InfoResponse>;
}
export interface CWCoreInterface extends CWCoreReadOnlyInterface {
    contractAddress: string;
    sender: string;
    executeAdminMsgs: ({ msgs }: {
        msgs: CosmosMsgForEmpty[];
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    executeProposalHook: ({ msgs }: {
        msgs: CosmosMsgForEmpty[];
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    pause: ({ duration }: {
        duration: Duration;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    receive: ({ amount, msg, sender }: {
        amount: Uint128;
        msg: Binary;
        sender: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    receiveNft: ({ msg, sender, tokenId }: {
        msg: Binary;
        sender: string;
        tokenId: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    removeItem: ({ key }: {
        key: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    setItem: ({ addr, key }: {
        addr: string;
        key: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    nominateAdmin: ({ admin }: {
        admin?: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    acceptAdminNomination: (fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    withdrawAdminNomination: (fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    updateConfig: ({ config }: {
        config: Config;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    updateCw20List: ({ toAdd, toRemove }: {
        toAdd: string[];
        toRemove: string[];
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    updateCw721List: ({ toAdd, toRemove }: {
        toAdd: string[];
        toRemove: string[];
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    updateProposalModules: ({ toAdd, toDisable }: {
        toAdd: ModuleInstantiateInfo[];
        toDisable: string[];
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    updateVotingModule: ({ module }: {
        module: ModuleInstantiateInfo;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    updateSubDaos: ({ toAdd, toRemove }: {
        toAdd: SubDao[];
        toRemove: string[];
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
export declare class CWCoreClient extends CWCoreQueryClient implements CWCoreInterface {
    client: SigningCosmWasmClient;
    sender: string;
    contractAddress: string;
    constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string);
    executeAdminMsgs: ({ msgs }: {
        msgs: CosmosMsgForEmpty[];
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    executeProposalHook: ({ msgs }: {
        msgs: CosmosMsgForEmpty[];
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    pause: ({ duration }: {
        duration: Duration;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    receive: ({ amount, msg, sender }: {
        amount: Uint128;
        msg: Binary;
        sender: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    receiveNft: ({ msg, sender, tokenId }: {
        msg: Binary;
        sender: string;
        tokenId: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    removeItem: ({ key }: {
        key: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    setItem: ({ addr, key }: {
        addr: string;
        key: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    nominateAdmin: ({ admin }: {
        admin?: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    acceptAdminNomination: (fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    withdrawAdminNomination: (fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    updateConfig: ({ config }: {
        config: Config;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    updateCw20List: ({ toAdd, toRemove }: {
        toAdd: string[];
        toRemove: string[];
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    updateCw721List: ({ toAdd, toRemove }: {
        toAdd: string[];
        toRemove: string[];
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    updateProposalModules: ({ toAdd, toDisable }: {
        toAdd: ModuleInstantiateInfo[];
        toDisable: string[];
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    updateVotingModule: ({ module }: {
        module: ModuleInstantiateInfo;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    updateSubDaos: ({ toAdd, toRemove }: {
        toAdd: SubDao[];
        toRemove: string[];
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
