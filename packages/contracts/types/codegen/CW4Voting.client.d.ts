/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.24.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { DaoResponse, MemberDiff, GroupContractResponse, InfoResponse, TotalPowerAtHeightResponse, VotingPowerAtHeightResponse } from "./CW4Voting.types";
export interface CW4VotingReadOnlyInterface {
    contractAddress: string;
    groupContract: () => Promise<GroupContractResponse>;
    dao: () => Promise<DaoResponse>;
    votingPowerAtHeight: ({ address, height }: {
        address: string;
        height?: number;
    }) => Promise<VotingPowerAtHeightResponse>;
    totalPowerAtHeight: ({ height }: {
        height?: number;
    }) => Promise<TotalPowerAtHeightResponse>;
    info: () => Promise<InfoResponse>;
}
export declare class CW4VotingQueryClient implements CW4VotingReadOnlyInterface {
    client: CosmWasmClient;
    contractAddress: string;
    constructor(client: CosmWasmClient, contractAddress: string);
    groupContract: () => Promise<GroupContractResponse>;
    dao: () => Promise<DaoResponse>;
    votingPowerAtHeight: ({ address, height }: {
        address: string;
        height?: number;
    }) => Promise<VotingPowerAtHeightResponse>;
    totalPowerAtHeight: ({ height }: {
        height?: number;
    }) => Promise<TotalPowerAtHeightResponse>;
    info: () => Promise<InfoResponse>;
}
export interface CW4VotingInterface extends CW4VotingReadOnlyInterface {
    contractAddress: string;
    sender: string;
    memberChangedHook: ({ diffs }: {
        diffs: MemberDiff[];
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
export declare class CW4VotingClient extends CW4VotingQueryClient implements CW4VotingInterface {
    client: SigningCosmWasmClient;
    sender: string;
    contractAddress: string;
    constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string);
    memberChangedHook: ({ diffs }: {
        diffs: MemberDiff[];
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
