/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.24.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
import { MsgExecuteContractEncodeObject } from "cosmwasm";
import { Uint128, Config, CosmosMsgForEmpty, Binary, Duration, Coin, ModuleInstantiateInfo, SubDao } from "./CWCore.types";
export interface CWCoreMessage {
    contractAddress: string;
    sender: string;
    executeAdminMsgs: ({ msgs }: {
        msgs: CosmosMsgForEmpty[];
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    executeProposalHook: ({ msgs }: {
        msgs: CosmosMsgForEmpty[];
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    pause: ({ duration }: {
        duration: Duration;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    receive: ({ amount, msg, sender }: {
        amount: Uint128;
        msg: Binary;
        sender: string;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    receiveNft: ({ msg, sender, tokenId }: {
        msg: Binary;
        sender: string;
        tokenId: string;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    removeItem: ({ key }: {
        key: string;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    setItem: ({ addr, key }: {
        addr: string;
        key: string;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    nominateAdmin: ({ admin }: {
        admin?: string;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    acceptAdminNomination: (funds?: Coin[]) => MsgExecuteContractEncodeObject;
    withdrawAdminNomination: (funds?: Coin[]) => MsgExecuteContractEncodeObject;
    updateConfig: ({ config }: {
        config: Config;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    updateCw20List: ({ toAdd, toRemove }: {
        toAdd: string[];
        toRemove: string[];
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    updateCw721List: ({ toAdd, toRemove }: {
        toAdd: string[];
        toRemove: string[];
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    updateProposalModules: ({ toAdd, toDisable }: {
        toAdd: ModuleInstantiateInfo[];
        toDisable: string[];
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    updateVotingModule: ({ module }: {
        module: ModuleInstantiateInfo;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    updateSubDaos: ({ toAdd, toRemove }: {
        toAdd: SubDao[];
        toRemove: string[];
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
}
export declare class CWCoreMessageComposer implements CWCoreMessage {
    sender: string;
    contractAddress: string;
    constructor(sender: string, contractAddress: string);
    executeAdminMsgs: ({ msgs }: {
        msgs: CosmosMsgForEmpty[];
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    executeProposalHook: ({ msgs }: {
        msgs: CosmosMsgForEmpty[];
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    pause: ({ duration }: {
        duration: Duration;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    receive: ({ amount, msg, sender }: {
        amount: Uint128;
        msg: Binary;
        sender: string;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    receiveNft: ({ msg, sender, tokenId }: {
        msg: Binary;
        sender: string;
        tokenId: string;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    removeItem: ({ key }: {
        key: string;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    setItem: ({ addr, key }: {
        addr: string;
        key: string;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    nominateAdmin: ({ admin }: {
        admin?: string;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    acceptAdminNomination: (funds?: Coin[]) => MsgExecuteContractEncodeObject;
    withdrawAdminNomination: (funds?: Coin[]) => MsgExecuteContractEncodeObject;
    updateConfig: ({ config }: {
        config: Config;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    updateCw20List: ({ toAdd, toRemove }: {
        toAdd: string[];
        toRemove: string[];
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    updateCw721List: ({ toAdd, toRemove }: {
        toAdd: string[];
        toRemove: string[];
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    updateProposalModules: ({ toAdd, toDisable }: {
        toAdd: ModuleInstantiateInfo[];
        toDisable: string[];
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    updateVotingModule: ({ module }: {
        module: ModuleInstantiateInfo;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    updateSubDaos: ({ toAdd, toRemove }: {
        toAdd: SubDao[];
        toRemove: string[];
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
}
