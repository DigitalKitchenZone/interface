/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.24.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
import { MsgExecuteContractEncodeObject } from "cosmwasm";
import { Duration, VotingStrategy, MultipleChoiceOptions, Coin, MultipleChoiceVote, DepositInfo } from "./CWProposalMultiple.types";
export interface CWProposalMultipleMessage {
    contractAddress: string;
    sender: string;
    propose: ({ choices, description, title }: {
        choices: MultipleChoiceOptions;
        description: string;
        title: string;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    vote: ({ proposalId, vote }: {
        proposalId: number;
        vote: MultipleChoiceVote;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    execute: ({ proposalId }: {
        proposalId: number;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    close: ({ proposalId }: {
        proposalId: number;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    updateConfig: ({ allowRevoting, closeProposalOnExecutionFailure, dao, depositInfo, maxVotingPeriod, minVotingPeriod, onlyMembersExecute, votingStrategy }: {
        allowRevoting: boolean;
        closeProposalOnExecutionFailure: boolean;
        dao: string;
        depositInfo?: DepositInfo;
        maxVotingPeriod: Duration;
        minVotingPeriod?: Duration;
        onlyMembersExecute: boolean;
        votingStrategy: VotingStrategy;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    addProposalHook: ({ address }: {
        address: string;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    removeProposalHook: ({ address }: {
        address: string;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    addVoteHook: ({ address }: {
        address: string;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    removeVoteHook: ({ address }: {
        address: string;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
}
export declare class CWProposalMultipleMessageComposer implements CWProposalMultipleMessage {
    sender: string;
    contractAddress: string;
    constructor(sender: string, contractAddress: string);
    propose: ({ choices, description, title }: {
        choices: MultipleChoiceOptions;
        description: string;
        title: string;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    vote: ({ proposalId, vote }: {
        proposalId: number;
        vote: MultipleChoiceVote;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    execute: ({ proposalId }: {
        proposalId: number;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    close: ({ proposalId }: {
        proposalId: number;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    updateConfig: ({ allowRevoting, closeProposalOnExecutionFailure, dao, depositInfo, maxVotingPeriod, minVotingPeriod, onlyMembersExecute, votingStrategy }: {
        allowRevoting: boolean;
        closeProposalOnExecutionFailure: boolean;
        dao: string;
        depositInfo?: DepositInfo;
        maxVotingPeriod: Duration;
        minVotingPeriod?: Duration;
        onlyMembersExecute: boolean;
        votingStrategy: VotingStrategy;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    addProposalHook: ({ address }: {
        address: string;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    removeProposalHook: ({ address }: {
        address: string;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    addVoteHook: ({ address }: {
        address: string;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    removeVoteHook: ({ address }: {
        address: string;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
}
