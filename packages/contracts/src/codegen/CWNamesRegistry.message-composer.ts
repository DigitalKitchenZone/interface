/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.24.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { Coin } from "@cosmjs/amino";
import { MsgExecuteContractEncodeObject } from "cosmwasm";
import { MsgExecuteContract } from "cosmjs-types/cosmwasm/wasm/v1/tx";
import { toUtf8 } from "@cosmjs/encoding";
import { Addr, ConfigResponse, ExecuteMsg, InstantiateMsg, IsNameAvailableToRegisterResponse, LookUpDaoByNameResponse, LookUpNameByDaoResponse, QueryMsg } from "./CWNamesRegistry.types";
export interface CWNamesRegistryMessage {
  contractAddress: string;
  sender: string;
  registerName: ({
    name
  }: {
    name: string;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  updateConfig: ({
    newAdmin
  }: {
    newAdmin?: string;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  reserve: ({
    name
  }: {
    name: string;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  revoke: ({
    name
  }: {
    name: string;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
}
export class CWNamesRegistryMessageComposer implements CWNamesRegistryMessage {
  sender: string;
  contractAddress: string;

  constructor(sender: string, contractAddress: string) {
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.registerName = this.registerName.bind(this);
    this.updateConfig = this.updateConfig.bind(this);
    this.reserve = this.reserve.bind(this);
    this.revoke = this.revoke.bind(this);
  }

  registerName = ({
    name
  }: {
    name: string;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          register_name: {
            name
          }
        })),
        funds
      })
    };
  };
  updateConfig = ({
    newAdmin
  }: {
    newAdmin?: string;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          update_config: {
            new_admin: newAdmin
          }
        })),
        funds
      })
    };
  };
  reserve = ({
    name
  }: {
    name: string;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          reserve: {
            name
          }
        })),
        funds
      })
    };
  };
  revoke = ({
    name
  }: {
    name: string;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          revoke: {
            name
          }
        })),
        funds
      })
    };
  };
}