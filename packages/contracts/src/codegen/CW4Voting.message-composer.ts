/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.24.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { Coin } from "@cosmjs/amino";
import { MsgExecuteContractEncodeObject } from "cosmwasm";
import { MsgExecuteContract } from "cosmjs-types/cosmwasm/wasm/v1/tx";
import { toUtf8 } from "@cosmjs/encoding";
import { DaoResponse, ExecuteMsg, MemberDiff, GroupContractResponse, InfoResponse, ContractVersion, InstantiateMsg, Member, MigrateMsg, QueryMsg, Uint128, TotalPowerAtHeightResponse, VotingPowerAtHeightResponse } from "./CW4Voting.types";
export interface CW4VotingMessage {
  contractAddress: string;
  sender: string;
  memberChangedHook: ({
    diffs
  }: {
    diffs: MemberDiff[];
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
}
export class CW4VotingMessageComposer implements CW4VotingMessage {
  sender: string;
  contractAddress: string;

  constructor(sender: string, contractAddress: string) {
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.memberChangedHook = this.memberChangedHook.bind(this);
  }

  memberChangedHook = ({
    diffs
  }: {
    diffs: MemberDiff[];
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          member_changed_hook: {
            diffs
          }
        })),
        funds
      })
    };
  };
}