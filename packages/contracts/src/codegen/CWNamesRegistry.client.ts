/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.24.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { Addr, ConfigResponse, ExecuteMsg, InstantiateMsg, IsNameAvailableToRegisterResponse, LookUpDaoByNameResponse, LookUpNameByDaoResponse, QueryMsg } from "./CWNamesRegistry.types";
export interface CWNamesRegistryReadOnlyInterface {
  contractAddress: string;
  config: () => Promise<ConfigResponse>;
  lookUpNameByDao: ({
    dao
  }: {
    dao: string;
  }) => Promise<LookUpNameByDaoResponse>;
  lookUpDaoByName: ({
    name
  }: {
    name: string;
  }) => Promise<LookUpDaoByNameResponse>;
  isNameAvailableToRegister: ({
    name
  }: {
    name: string;
  }) => Promise<IsNameAvailableToRegisterResponse>;
}
export class CWNamesRegistryQueryClient implements CWNamesRegistryReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.config = this.config.bind(this);
    this.lookUpNameByDao = this.lookUpNameByDao.bind(this);
    this.lookUpDaoByName = this.lookUpDaoByName.bind(this);
    this.isNameAvailableToRegister = this.isNameAvailableToRegister.bind(this);
  }

  config = async (): Promise<ConfigResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      config: {}
    });
  };
  lookUpNameByDao = async ({
    dao
  }: {
    dao: string;
  }): Promise<LookUpNameByDaoResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      look_up_name_by_dao: {
        dao
      }
    });
  };
  lookUpDaoByName = async ({
    name
  }: {
    name: string;
  }): Promise<LookUpDaoByNameResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      look_up_dao_by_name: {
        name
      }
    });
  };
  isNameAvailableToRegister = async ({
    name
  }: {
    name: string;
  }): Promise<IsNameAvailableToRegisterResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      is_name_available_to_register: {
        name
      }
    });
  };
}
export interface CWNamesRegistryInterface extends CWNamesRegistryReadOnlyInterface {
  contractAddress: string;
  sender: string;
  registerName: ({
    name
  }: {
    name: string;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  updateConfig: ({
    newAdmin
  }: {
    newAdmin?: string;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  reserve: ({
    name
  }: {
    name: string;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  revoke: ({
    name
  }: {
    name: string;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
export class CWNamesRegistryClient extends CWNamesRegistryQueryClient implements CWNamesRegistryInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.registerName = this.registerName.bind(this);
    this.updateConfig = this.updateConfig.bind(this);
    this.reserve = this.reserve.bind(this);
    this.revoke = this.revoke.bind(this);
  }

  registerName = async ({
    name
  }: {
    name: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      register_name: {
        name
      }
    }, fee, memo, funds);
  };
  updateConfig = async ({
    newAdmin
  }: {
    newAdmin?: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_config: {
        new_admin: newAdmin
      }
    }, fee, memo, funds);
  };
  reserve = async ({
    name
  }: {
    name: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      reserve: {
        name
      }
    }, fee, memo, funds);
  };
  revoke = async ({
    name
  }: {
    name: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      revoke: {
        name
      }
    }, fee, memo, funds);
  };
}