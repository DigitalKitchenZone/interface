/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.24.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { MsgExecuteContractEncodeObject } from "cosmwasm";
import { MsgExecuteContract } from "cosmjs-types/cosmwasm/wasm/v1/tx";
import { toUtf8 } from "@cosmjs/encoding";
import { Addr, ProposalModuleStatus, ActiveProposalModulesResponse, ProposalModule, AdminNominationResponse, AdminResponse, ConfigResponse, Uint128, Cw20BalancesResponse, Cw20TokenListResponse, Cw721TokenListResponse, DaoURIResponse, Timestamp, Uint64, PauseInfoResponse, Expiration, DumpStateResponse, Config, ContractVersion, ExecuteMsg, CosmosMsgForEmpty, BankMsg, StakingMsg, DistributionMsg, Binary, IbcMsg, WasmMsg, GovMsg, VoteOption, Duration, Admin, Coin, Empty, IbcTimeout, IbcTimeoutBlock, Cw20ReceiveMsg, Cw721ReceiveMsg, ModuleInstantiateInfo, SubDao, GetItemResponse, InfoResponse, InstantiateMsg, InitialItem, NameRegisterInfo, ListItemsResponse, ListSubDaosResponse, MigrateMsg, ProposalModulesResponse, QueryMsg, TotalPowerAtHeightResponse, VotingModuleResponse, VotingPowerAtHeightResponse } from "./CWCore.types";
export interface CWCoreMessage {
  contractAddress: string;
  sender: string;
  executeAdminMsgs: ({
    msgs
  }: {
    msgs: CosmosMsgForEmpty[];
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  executeProposalHook: ({
    msgs
  }: {
    msgs: CosmosMsgForEmpty[];
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  pause: ({
    duration
  }: {
    duration: Duration;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  receive: ({
    amount,
    msg,
    sender
  }: {
    amount: Uint128;
    msg: Binary;
    sender: string;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  receiveNft: ({
    msg,
    sender,
    tokenId
  }: {
    msg: Binary;
    sender: string;
    tokenId: string;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  removeItem: ({
    key
  }: {
    key: string;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  setItem: ({
    addr,
    key
  }: {
    addr: string;
    key: string;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  nominateAdmin: ({
    admin
  }: {
    admin?: string;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  acceptAdminNomination: (funds?: Coin[]) => MsgExecuteContractEncodeObject;
  withdrawAdminNomination: (funds?: Coin[]) => MsgExecuteContractEncodeObject;
  updateConfig: ({
    config
  }: {
    config: Config;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  updateCw20List: ({
    toAdd,
    toRemove
  }: {
    toAdd: string[];
    toRemove: string[];
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  updateCw721List: ({
    toAdd,
    toRemove
  }: {
    toAdd: string[];
    toRemove: string[];
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  updateProposalModules: ({
    toAdd,
    toDisable
  }: {
    toAdd: ModuleInstantiateInfo[];
    toDisable: string[];
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  updateVotingModule: ({
    module
  }: {
    module: ModuleInstantiateInfo;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  updateSubDaos: ({
    toAdd,
    toRemove
  }: {
    toAdd: SubDao[];
    toRemove: string[];
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
}
export class CWCoreMessageComposer implements CWCoreMessage {
  sender: string;
  contractAddress: string;

  constructor(sender: string, contractAddress: string) {
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.executeAdminMsgs = this.executeAdminMsgs.bind(this);
    this.executeProposalHook = this.executeProposalHook.bind(this);
    this.pause = this.pause.bind(this);
    this.receive = this.receive.bind(this);
    this.receiveNft = this.receiveNft.bind(this);
    this.removeItem = this.removeItem.bind(this);
    this.setItem = this.setItem.bind(this);
    this.nominateAdmin = this.nominateAdmin.bind(this);
    this.acceptAdminNomination = this.acceptAdminNomination.bind(this);
    this.withdrawAdminNomination = this.withdrawAdminNomination.bind(this);
    this.updateConfig = this.updateConfig.bind(this);
    this.updateCw20List = this.updateCw20List.bind(this);
    this.updateCw721List = this.updateCw721List.bind(this);
    this.updateProposalModules = this.updateProposalModules.bind(this);
    this.updateVotingModule = this.updateVotingModule.bind(this);
    this.updateSubDaos = this.updateSubDaos.bind(this);
  }

  executeAdminMsgs = ({
    msgs
  }: {
    msgs: CosmosMsgForEmpty[];
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          execute_admin_msgs: {
            msgs
          }
        })),
        funds
      })
    };
  };
  executeProposalHook = ({
    msgs
  }: {
    msgs: CosmosMsgForEmpty[];
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          execute_proposal_hook: {
            msgs
          }
        })),
        funds
      })
    };
  };
  pause = ({
    duration
  }: {
    duration: Duration;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          pause: {
            duration
          }
        })),
        funds
      })
    };
  };
  receive = ({
    amount,
    msg,
    sender
  }: {
    amount: Uint128;
    msg: Binary;
    sender: string;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          receive: {
            amount,
            msg,
            sender
          }
        })),
        funds
      })
    };
  };
  receiveNft = ({
    msg,
    sender,
    tokenId
  }: {
    msg: Binary;
    sender: string;
    tokenId: string;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          receive_nft: {
            msg,
            sender,
            token_id: tokenId
          }
        })),
        funds
      })
    };
  };
  removeItem = ({
    key
  }: {
    key: string;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          remove_item: {
            key
          }
        })),
        funds
      })
    };
  };
  setItem = ({
    addr,
    key
  }: {
    addr: string;
    key: string;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          set_item: {
            addr,
            key
          }
        })),
        funds
      })
    };
  };
  nominateAdmin = ({
    admin
  }: {
    admin?: string;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          nominate_admin: {
            admin
          }
        })),
        funds
      })
    };
  };
  acceptAdminNomination = (funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          accept_admin_nomination: {}
        })),
        funds
      })
    };
  };
  withdrawAdminNomination = (funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          withdraw_admin_nomination: {}
        })),
        funds
      })
    };
  };
  updateConfig = ({
    config
  }: {
    config: Config;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          update_config: {
            config
          }
        })),
        funds
      })
    };
  };
  updateCw20List = ({
    toAdd,
    toRemove
  }: {
    toAdd: string[];
    toRemove: string[];
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          update_cw20_list: {
            to_add: toAdd,
            to_remove: toRemove
          }
        })),
        funds
      })
    };
  };
  updateCw721List = ({
    toAdd,
    toRemove
  }: {
    toAdd: string[];
    toRemove: string[];
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          update_cw721_list: {
            to_add: toAdd,
            to_remove: toRemove
          }
        })),
        funds
      })
    };
  };
  updateProposalModules = ({
    toAdd,
    toDisable
  }: {
    toAdd: ModuleInstantiateInfo[];
    toDisable: string[];
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          update_proposal_modules: {
            to_add: toAdd,
            to_disable: toDisable
          }
        })),
        funds
      })
    };
  };
  updateVotingModule = ({
    module
  }: {
    module: ModuleInstantiateInfo;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          update_voting_module: {
            module
          }
        })),
        funds
      })
    };
  };
  updateSubDaos = ({
    toAdd,
    toRemove
  }: {
    toAdd: SubDao[];
    toRemove: string[];
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          update_sub_daos: {
            to_add: toAdd,
            to_remove: toRemove
          }
        })),
        funds
      })
    };
  };
}